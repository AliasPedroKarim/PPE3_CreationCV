/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.karimandco.image;

import fr.karim.main.utils.user.Utilisateur;
import java.awt.Image;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author metac
 */
public class ShowImage extends javax.swing.JPanel {

    /**
     * Creates new form ChoisirImage
     */
    InputStream stream;
    InputStream imagePrint;
    File file;
    
    private JFrame frame;

    public ShowImage() {
        initComponents();
        init();
    }

    public ShowImage(JFrame frame) {
        initComponents();
        this.frame = frame;
        init();
    }

    public void init(){
        stream = null;
    }

    public InputStream getStream() {
        return stream;
    }

    public void setStream(InputStream stream) {
        this.stream = stream;
    }

    public InputStream getImagePrint() {
        return imagePrint;
    }

    public void setImagePrint(InputStream imagePrint) {
        this.imagePrint = imagePrint;
    }

    public File getFile() {
        return file;
    }

    public void setFile(File file) {
        this.file = file;
    }

    public JLabel getjLabelImages() {
        return jLabelImages;
    }

    public void setjLabelImages(JLabel jLabelImages) {
        this.jLabelImages = jLabelImages;
    }
    
    public JFrame getFrame() {
        return frame;
    }

    public void setFrame(JFrame frame) {
        this.frame = frame;
    }

    public void loadImage(){
        encodeToBlob();
        try {
            byte[] imagebyte = new byte[stream.available()];
            imagePrint.read(imagebyte);
            //  Lire le Blob en tableau
            //  Convertion du tableau en image
            ImageIcon imageFini = new ImageIcon(new ImageIcon(imagebyte).getImage().getScaledInstance(250, -1, Image.SCALE_DEFAULT));
            jLabelImages.setIcon(imageFini);
        } catch (Exception e) {
            //Echec de la convertion
            Logger.getLogger(ChoisirImage.class.getName()).log(Level.SEVERE, null, e);
        }

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelShowImage = new javax.swing.JPanel();
        jLabelImages = new javax.swing.JLabel();

        jPanelShowImage.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanelShowImageLayout = new javax.swing.GroupLayout(jPanelShowImage);
        jPanelShowImage.setLayout(jPanelShowImageLayout);
        jPanelShowImageLayout.setHorizontalGroup(
            jPanelShowImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelShowImageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelImages, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelShowImageLayout.setVerticalGroup(
            jPanelShowImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelShowImageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelImages, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelShowImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelShowImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void afficherImage() {
        InputStream inputStream = this.encodeToBlob();
        this.afficherImage(inputStream);
    }

    public void afficherImage(InputStream inputStream) {
        try {
            if (inputStream != null) {
                byte[] imagebyte = new byte[inputStream.available()];
                inputStream.read(imagebyte);
                jLabelImages.setIcon(new ImageIcon(new ImageIcon(imagebyte).getImage().getScaledInstance(250, -1, Image.SCALE_DEFAULT)));
            }
        } catch (IOException ex) {
            Logger.getLogger(ChoisirImage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public InputStream encodeToBlob() {
        try {
            this.imagePrint = new FileInputStream(file);
            this.stream = new FileInputStream(file);
            return new FileInputStream(new File(this.file.getAbsolutePath()));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ChoisirImage.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    public void readPicture(int materialId) {
        ResultSet rs = null;
        PreparedStatement pstmt = null;
 
        try {
            pstmt = fr.karim.connexion.DaoSIO.getInstance().getConnexion().prepareStatement("SELECT * FROM media WHERE id_utilisateur = ?");
            pstmt.setInt(1, Utilisateur.getInstance().getId());
            rs = pstmt.executeQuery();
 
            while (rs.next()) {
                    InputStream input = rs.getBinaryStream("image");
                    
                    if(input != null){
                        this.afficherImage(input);
                    }

                    if(rs.getBinaryStream("image").toString().equals("")){
                        byte[] buffer = new byte[1024];
                        while (input.read(buffer) > 0) {
                        }
                    }
                }
        } catch (SQLException | IOException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
 
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelImages;
    private javax.swing.JPanel jPanelShowImage;
    // End of variables declaration//GEN-END:variables
}
